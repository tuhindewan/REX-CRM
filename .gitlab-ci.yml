stages:
  - testing
  - deploy

# Select what we should cache
cache:
  paths:
    - vendor/

services:
  - mysql

before_script:
  # Install git, the php image doesn't have installed
  - apt-get update -yqq
  - apt-get install git -yqq

  # instll the required packages for the running CI tests
  - apt-get -yqqf install vim wget zip unzip subversion default-mysql-client libmcrypt-dev default-libmysqlclient-dev libonig-dev --fix-missing

  # Install mysql driver
  - docker-php-ext-install mysqli pdo_mysql mbstring

  # Install Xdebug
  - pecl install xdebug

  # PHP extensions
  - docker-php-ext-enable mysqli pdo_mysql mbstring xdebug

  # Install composer
  - curl -sS https://getcomposer.org/installer | php

  # Install all project dependencies
  - php composer.phar install

  - bash bin/install-wp-tests.sh wordpress_test root mysql mysql $WP_VERSION

variables:
  # Configure mysql service (https://hub.docker.com/_/mysql/)
  MYSQL_DATABASE: wordpress_tests
  MYSQL_ROOT_PASSWORD: mysql
  WP_VERSION: latest
  WP_MULTISITE: "0"
  WORDPRESS_SITE_DIR: /var/www/html
  WORDPRESS_PLUGIN_NAME: mrm
  NODE_BIN_PATH: /usr/local/nvm/node/v14.15.3/bin
  COMPOSER_BIN_PATH: /usr/local/bin/composer

# We test PHP7
test:php7:
  image: php:7
  stage: testing
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"'
  script:
    - vendor/bin/phpunit --coverage-text --coverage-clover=coverage.clover --colors=never


# We test PHP7 with multisite
test:php7:multisite:
  variables:
    WP_VERSION: latest
    WP_MULTISITE: "1"
  image: php:7
  stage: testing
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"'
  script:
    - vendor/bin/phpunit --coverage-text --coverage-clover=coverage.clove --colors=never


# deploy to dev server
#deploy:
#  stage: deploy
#  image: kroniak/ssh-client
#  script:
#    - chmod og= $STAGE_ID_RSA
#    # prepare destination server - clean destination directory except for /wp-content/uploads
#    - ssh -i $STAGE_ID_RSA -o StrictHostKeyChecking=no $STAGE_SERVER_USER@$STAGE_SERVER_IP "
#      find $WORDPRESS_SITE_DIR -mindepth 1 ! -regex '^$WORDPRESS_SITE_DIR/wp-content/uploads\(/.*\)?' -delete  || true"
#
#    # install plugins
##    - ssh -i $STAGE_ID_RSA -o StrictHostKeyChecking=no $STAGE_SERVER_USER@$STAGE_SERVER_IP "
##      cd $WORDPRESS_SITE_DIR &&
##      wp plugin install $WORDPRESS_PLUGINS"
#
#    # deploy updated theme code to destination server
#    - ssh -i $STAGE_ID_RSA -o StrictHostKeyChecking=no $STAGE_SERVER_USER@$STAGE_SERVER_IP "mkdir -p $WORDPRESS_SITE_DIR/wp-content/plugins/$WORDPRESS_PLUGIN_NAME"
#    - scp -r -i $STAGE_ID_RSA ./wp-content/themes/$WORDPRESS_PLUGIN_NAME $STAGE_SERVER_USER@$STAGE_SERVER_IP:$WORDPRESS_SITE_DIR/wp-content/plugins/
#
#    # build theme frontend JS/CSS assets on destination server
#    - ssh -i $STAGE_ID_RSA -o StrictHostKeyChecking=no $STAGE_SERVER_USER@$STAGE_SERVER_IP "
#      export PATH=$PATH:$NODE_BIN_PATH:$COMPOSER_BIN_PATH &&
#      cd $WORDPRESS_SITE_DIR/wp-content/plugins/$WORDPRESS_PLUGIN_NAME &&
#      composer install --no-dev &&
#      npm install --only=prod"
#
#    # enable deployed plugins
#    - ssh -i $STAGE_ID_RSA -o StrictHostKeyChecking=no $STAGE_SERVER_USER@$STAGE_SERVER_IP "
#      cd $WORDPRESS_SITE_DIR &&
#      wp theme activate $WORDPRESS_PLUGIN_NAME"
#
#    # ensure WordPress and plugins have permissions on content/themes/plugin dirs
#    - ssh -i $STAGE_ID_RSA -o StrictHostKeyChecking=no $STAGE_SERVER_USER@$STAGE_SERVER_IP "
#      chgrp -R www-data $WORDPRESS_SITE_DIR || true"